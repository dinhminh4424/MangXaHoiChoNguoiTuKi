import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { useAuth } from "../../contexts/AuthContext";
import notificationService from "../../services/notificationService"; // Import service

const Login = () => {
  const [formData, setFormData] = useState({
    email: "",
    password: "",
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const { login } = useAuth();
  const navigate = useNavigate();

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
    // X√≥a l·ªói khi ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu nh·∫≠p l·∫°i
    // if (error) setError("");
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!formData.email || !formData.password) {
      setError("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin");
      return;
    }

    setLoading(true);
    setError("");

    try {
      const result = await login(formData.email, formData.password);
      if (result.success) {
        // Th√¥ng b√°o th√†nh c√¥ng
        // await notificationService.success({
        //   title: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
        //   text: "Ch√†o m·ª´ng b·∫°n tr·ªü l·∫°i!",
        //   timer: 2000,
        //   showConfirmButton: false,
        // });
        // navigate("/");

        console.log("‚úÖ Login successful, checking auth state...");
        console.log("üì¶ Token in localStorage:", localStorage.getItem("token"));
        console.log("üïí Waiting 100ms before navigate...");

        // Th√™m delay nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o state ƒë∆∞·ª£c update

        console.log("üöÄ Navigating to / ...");
        notificationService.success({
          title: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
          text: "Ch√†o m·ª´ng b·∫°n tr·ªü l·∫°i!: " + result.token,
          timer: 3000,
          showConfirmButton: false,
        });
        navigate("/");
      } else {
        // Hi·ªÉn th·ªã l·ªói b·∫±ng SweetAlert2
        await notificationService.error({
          title: "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i",
          text: result.message,
          confirmButtonText: "Th·ª≠ l·∫°i",
          timer: 3000,
        });
        setError(result.message);
      }
    } catch (error) {
      // X·ª≠ l√Ω l·ªói kh√¥ng mong mu·ªën
      await notificationService.error({
        title: "L·ªói h·ªá th·ªëng",
        text: "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau!",
        confirmButtonText: "ƒê√≥ng",
      });

      setError("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau!");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container-fluid vh-100 bg-light">
      <div className="row h-100 justify-content-center align-items-center">
        <div className="col-md-4">
          <div className="card shadow">
            <div className="card-body p-5">
              <div className="text-center mb-4">
                <h2 className="text-primary">ƒêƒÉng nh·∫≠p</h2>
                <p className="text-muted">K·∫øt n·ªëi v√† h·ªó tr·ª£ c·ªông ƒë·ªìng</p>
              </div>

              {error && (
                <div className="alert alert-danger" role="alert">
                  {error}
                </div>
              )}

              <form onSubmit={handleSubmit}>
                <div className="mb-3">
                  <label htmlFor="email" className="form-label">
                    Email
                  </label>
                  <input
                    type="email"
                    className="form-control"
                    id="email"
                    name="email"
                    value={formData.email}
                    onChange={handleChange}
                    required
                    disabled={loading}
                  />
                </div>

                <div className="mb-3">
                  <label htmlFor="password" className="form-label">
                    M·∫≠t kh·∫©u
                  </label>
                  <input
                    type="password"
                    className="form-control"
                    id="password"
                    name="password"
                    value={formData.password}
                    onChange={handleChange}
                    required
                    disabled={loading}
                  />
                </div>

                <button
                  type="submit"
                  className="btn btn-primary w-100 py-2"
                  disabled={loading}
                >
                  {loading ? (
                    <>
                      <span className="spinner-border spinner-border-sm me-2" />
                      ƒêang ƒëƒÉng nh·∫≠p...
                    </>
                  ) : (
                    "ƒêƒÉng nh·∫≠p"
                  )}
                </button>
              </form>

              <div className="text-center mt-3">
                <p className="mb-0">
                  Ch∆∞a c√≥ t√†i kho·∫£n?{" "}
                  <Link to="/register" className="text-decoration-none">
                    ƒêƒÉng k√Ω ngay
                  </Link>
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Login;
