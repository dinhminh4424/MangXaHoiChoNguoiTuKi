// import React, { useRef, useState, useEffect } from "react";
// import api from "../../services/api";
// import * as faceapi from "face-api.js";

// const FaceLogin = () => {
//   // üìπ Tham chi·∫øu t·ªõi th·∫ª <video> ƒë·ªÉ hi·ªÉn th·ªã camera
//   const videoRef = useRef(null);

//   // üî§ C√°c tr·∫°ng th√°i hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng
//   const [status, setStatus] = useState("B·∫≠t camera ƒë·ªÉ ƒëƒÉng nh·∫≠p");

//   // üë• Danh s√°ch user c√≥ d·ªØ li·ªáu khu√¥n m·∫∑t t·ª´ backend
//   const [users, setUsers] = useState([]);

//   // üß† Tr·∫°ng th√°i models c·ªßa face-api.js ƒë√£ load xong ch∆∞a
//   const [modelsLoaded, setModelsLoaded] = useState(false);

//   // üéØ Ng∆∞·ª°ng so kh·ªõp descriptor (ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·ªØa 2 khu√¥n m·∫∑t)
//   // C√†ng NH·ªé th√¨ y√™u c·∫ßu c√†ng kh·∫Øt khe (√≠t sai, nh∆∞ng c√≥ th·ªÉ kh√≥ kh·ªõp)
//   const FACE_MATCH_THRESHOLD = 0.55;

//   // ==========================
//   // 1Ô∏è‚É£ Load models c·ªßa face-api.js
//   // ==========================
//   useEffect(() => {
//     const loadModels = async () => {
//       try {
//         // Load 3 models c·∫ßn thi·∫øt ƒë·ªÉ ph√°t hi·ªán v√† nh·∫≠n d·∫°ng khu√¥n m·∫∑t
//         await Promise.all([
//           faceapi.nets.tinyFaceDetector.loadFromUri("/models"),
//           faceapi.nets.faceLandmark68Net.loadFromUri("/models"),
//           faceapi.nets.faceRecognitionNet.loadFromUri("/models"),
//         ]);
//         setModelsLoaded(true);
//         setStatus("Models ƒë√£ s·∫µn s√†ng");
//       } catch (error) {
//         console.error("L·ªói load models:", error);
//         setStatus("L·ªói khi t·∫£i models nh·∫≠n di·ªán khu√¥n m·∫∑t");
//       }
//     };

//     loadModels();
//   }, []);

//   // ==========================
//   // 2Ô∏è‚É£ T·∫£i danh s√°ch user c√≥ descriptor t·ª´ server
//   // ==========================
//   useEffect(() => {
//     if (modelsLoaded) {
//       api
//         .get("/api/auth/face-users")
//         .then((res) => {
//           console.log("Users loaded:", res.data);
//           setUsers(res.data);
//         })
//         .catch((err) => {
//           console.error("L·ªói t·∫£i users:", err);
//           setStatus("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng");
//         });
//     }
//   }, [modelsLoaded]);

//   // ==========================
//   // 3Ô∏è‚É£ H√†m kh·ªüi ƒë·ªông camera v√† b·∫Øt ƒë·∫ßu qu√©t khu√¥n m·∫∑t
//   // ==========================
//   const start = async () => {
//     if (!modelsLoaded) {
//       setStatus("Models ch∆∞a s·∫µn s√†ng");
//       return;
//     }

//     try {
//       // üé• Y√™u c·∫ßu quy·ªÅn truy c·∫≠p camera
//       const stream = await navigator.mediaDevices.getUserMedia({
//         video: { width: 640, height: 480 },
//       });

//       // G·∫Øn lu·ªìng camera v√†o th·∫ª <video>
//       videoRef.current.srcObject = stream;
//       setStatus("ƒêang qu√©t khu√¥n m·∫∑t...");

//       // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ camera s·∫µn s√†ng, r·ªìi b·∫Øt ƒë·∫ßu d√≤ khu√¥n m·∫∑t
//       setTimeout(() => {
//         detectFace();
//       }, 500);
//     } catch (error) {
//       console.error("L·ªói truy c·∫≠p camera:", error);
//       setStatus("Kh√¥ng th·ªÉ truy c·∫≠p camera");
//     }
//   };

//   // ==========================
//   // 4Ô∏è‚É£ H√†m nh·∫≠n di·ªán khu√¥n m·∫∑t t·ª´ video
//   // ==========================
//   const detectFace = async () => {
//     const video = videoRef.current;
//     let attempts = 0; // ƒê·∫øm s·ªë l·∫ßn th·ª≠ d√≤ khu√¥n m·∫∑t

//     const check = async () => {
//       if (attempts++ > 50) {
//         // Sau 50 l·∫ßn (~25 gi√¢y) kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t th√¨ d·ª´ng
//         setStatus("Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t");
//         return;
//       }

//       try {
//         // üîç D√≤ m·ªôt khu√¥n m·∫∑t duy nh·∫•t trong khung h√¨nh
//         const detection = await faceapi
//           .detectSingleFace(video, new faceapi.TinyFaceDetectorOptions())
//           .withFaceLandmarks()
//           .withFaceDescriptor();

//         if (detection) {
//           console.log(
//             "ƒê√£ ph√°t hi·ªán khu√¥n m·∫∑t, confidence:",
//             detection.detection.score
//           );

//           // L·∫•y vector m√¥ t·∫£ khu√¥n m·∫∑t (128 gi√° tr·ªã float)
//           const desc = Array.from(detection.descriptor);

//           // T√¨m ng∆∞·ªùi d√πng kh·ªõp nh·∫•t trong danh s√°ch
//           const match = findMatch(desc);

//           console.log("match.distance:", match?.distance);

//           // N·∫øu t√¨m ƒë∆∞·ª£c user kh·ªõp v√† ƒë·ªô sai bi·ªát nh·ªè h∆°n ng∆∞·ª°ng cho ph√©p
//           if (match && match.distance < FACE_MATCH_THRESHOLD) {
//             setStatus(`‚úÖ ƒê√£ nh·∫≠n di·ªán: ${match.user.username}`);
//             await login(match.user._id);
//             return;
//           } else {
//             // N·∫øu kh√¥ng kh·ªõp ƒë·ªß ng∆∞·ª°ng ho·∫∑c kh√¥ng c√≥ user n√†o
//             setStatus(
//               match
//                 ? `‚ùå Kh√¥ng kh·ªõp (${match.distance.toFixed(3)})`
//                 : "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ph√π h·ª£p"
//             );
//           }
//         } else {
//           setStatus("ƒêang t√¨m khu√¥n m·∫∑t...");
//         }

//         // Ti·∫øp t·ª•c ki·ªÉm tra l·∫°i sau 0.5 gi√¢y (v√≤ng l·∫∑p qu√©t)
//         setTimeout(check, 500);
//       } catch (error) {
//         console.error("L·ªói detect:", error);
//         setStatus("L·ªói khi nh·∫≠n di·ªán khu√¥n m·∫∑t");
//       }
//     };

//     check();
//   };

//   // ==========================
//   // 5Ô∏è‚É£ H√†m t√¨m user kh·ªõp nh·∫•t d·ª±a tr√™n descriptor
//   // ==========================
//   const findMatch = (queryDescriptor) => {
//     if (users.length === 0) {
//       console.log("Kh√¥ng c√≥ users n√†o trong database");
//       return null;
//     }

//     let bestMatch = null;
//     let minDistance = Infinity;

//     users.forEach((user) => {
//       try {
//         // L·∫•y descriptor t·ª´ user.profile.faceDescriptor
//         const storedDescriptor = user.profile?.faceDescriptor;

//         if (!storedDescriptor || !Array.isArray(storedDescriptor)) {
//           console.log(`User ${user.username} kh√¥ng c√≥ face descriptor`);
//           return;
//         }

//         if (storedDescriptor.length !== 128) {
//           console.log(`User ${user.username} descriptor kh√¥ng ƒë√∫ng ƒë·ªô d√†i`);
//           return;
//         }

//         // T·∫°o m·∫£ng Float32Array ƒë·ªÉ t√≠nh to√°n
//         const storedFloat32 = new Float32Array(storedDescriptor);
//         const queryFloat32 = new Float32Array(queryDescriptor);

//         // üî¢ T√≠nh kho·∫£ng c√°ch Euclidean gi·ªØa hai vector khu√¥n m·∫∑t
//         const distance = faceapi.euclideanDistance(queryFloat32, storedFloat32);

//         console.log(`So s√°nh v·ªõi ${user.username}: distance = ${distance}`);

//         // N·∫øu kho·∫£ng c√°ch nh·ªè h∆°n min hi·ªán t·∫°i th√¨ c·∫≠p nh·∫≠t user n√†y l√† g·∫ßn nh·∫•t
//         if (distance < minDistance) {
//           minDistance = distance;
//           bestMatch = { user, distance };
//         }
//       } catch (error) {
//         console.error("L·ªói so s√°nh v·ªõi user:", user.username, error);
//       }
//     });

//     console.log(
//       "Best match:",
//       bestMatch
//         ? `${bestMatch.user.username} (${minDistance.toFixed(3)})`
//         : "Kh√¥ng c√≥ user n√†o ph√π h·ª£p"
//     );
//     return bestMatch;
//   };

//   // ==========================
//   // 6Ô∏è‚É£ G·ª≠i request ƒëƒÉng nh·∫≠p khi nh·∫≠n di·ªán th√†nh c√¥ng
//   // ==========================
//   const login = async (userId) => {
//     try {
//       setStatus("ƒêang ƒëƒÉng nh·∫≠p...");
//       const res = await api.post("/api/auth/face-login", { userId });

//       if (res.data.success) {
//         // L∆∞u token v√†o localStorage ƒë·ªÉ d√πng cho c√°c request sau
//         localStorage.setItem("token", res.data.token);
//         setStatus("üéâ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");

//         // Chuy·ªÉn h∆∞·ªõng sang trang h·ªì s∆°
//         setTimeout(() => {
//           window.location.href = "/profile";
//         }, 1000);
//       } else {
//         setStatus("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i");
//       }
//     } catch (error) {
//       console.error("L·ªói login:", error);
//       setStatus(
//         "L·ªói ƒëƒÉng nh·∫≠p: " + (error.response?.data?.message || error.message)
//       );
//     }
//   };

//   // ==========================
//   // 7Ô∏è‚É£ D·ª´ng camera
//   // ==========================
//   const stopCamera = () => {
//     if (videoRef.current?.srcObject) {
//       videoRef.current.srcObject.getTracks().forEach((track) => track.stop());
//       setStatus("Camera ƒë√£ t·∫Øt");
//     }
//   };

//   // ==========================
//   // 8Ô∏è‚É£ Cleanup khi r·ªùi component
//   // ==========================
//   useEffect(() => {
//     return () => stopCamera();
//   }, []);

//   // ==========================
//   // 9Ô∏è‚É£ JSX: Giao di·ªán hi·ªÉn th·ªã
//   // ==========================
//   return (
//     <div className="container py-5">
//       <div className="row justify-content-center">
//         <div className="col-md-6">
//           <div className="card shadow-lg">
//             <div className="card-body text-center p-5">
//               <h2>ƒêƒÉng nh·∫≠p b·∫±ng khu√¥n m·∫∑t</h2>

//               <video
//                 ref={videoRef}
//                 autoPlay
//                 muted
//                 playsInline
//                 className="w-100 rounded mb-3"
//                 style={{ maxHeight: "400px", backgroundColor: "#f8f9fa" }}
//               ></video>

//               <p className="text-muted mb-3">{status}</p>

//               <div className="d-flex gap-2 justify-content-center">
//                 <button
//                   onClick={start}
//                   className="btn btn-primary btn-lg"
//                   disabled={!modelsLoaded}
//                 >
//                   {modelsLoaded ? "B·∫≠t Camera" : "ƒêang t·∫£i models..."}
//                 </button>

//                 <button
//                   onClick={stopCamera}
//                   className="btn btn-outline-secondary btn-lg"
//                 >
//                   T·∫Øt Camera
//                 </button>
//               </div>

//               {users.length > 0 && (
//                 <div className="mt-3">
//                   <small className="text-muted">
//                     C√≥ {users.length} ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√Ω khu√¥n m·∫∑t
//                   </small>
//                 </div>
//               )}
//             </div>
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default FaceLogin;

import React, { useRef, useState, useEffect } from "react";
import api from "../../services/api";
import * as faceapi from "face-api.js";

const FaceLogin = () => {
  const videoRef = useRef(null);
  const [status, setStatus] = useState("B·∫≠t camera ƒë·ªÉ b·∫Øt ƒë·∫ßu ƒëƒÉng nh·∫≠p");
  const [users, setUsers] = useState([]);
  const [modelsLoaded, setModelsLoaded] = useState(false);
  const [isScanning, setIsScanning] = useState(false);
  const [matchInfo, setMatchInfo] = useState(null);

  // Load face-api.js models
  useEffect(() => {
    const loadModels = async () => {
      try {
        setStatus("ƒêang t·∫£i AI nh·∫≠n di·ªán khu√¥n m·∫∑t...");
        await Promise.all([
          faceapi.nets.tinyFaceDetector.loadFromUri("/models"),
          faceapi.nets.faceLandmark68Net.loadFromUri("/models"),
          faceapi.nets.faceRecognitionNet.loadFromUri("/models"),
        ]);
        setModelsLoaded(true);
        setStatus("H·ªá th·ªëng ƒë√£ s·∫µn s√†ng");
      } catch (error) {
        console.error("L·ªói load models:", error);
        setStatus("‚ùå L·ªói t·∫£i h·ªá th·ªëng nh·∫≠n di·ªán");
      }
    };
    loadModels();
  }, []);

  // Load users
  useEffect(() => {
    if (modelsLoaded) {
      api.get("/api/auth/face-users").then((res) => {
        console.log("Users loaded:", res.data);
        setUsers(res.data);
      });
    }
  }, [modelsLoaded]);

  const start = async () => {
    if (!modelsLoaded) {
      setStatus("H·ªá th·ªëng ch∆∞a s·∫µn s√†ng");
      return;
    }

    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { width: 640, height: 480 },
      });
      videoRef.current.srcObject = stream;
      setIsScanning(true);
      setStatus("üîç ƒêang qu√©t khu√¥n m·∫∑t...");
      setMatchInfo(null);

      // ƒê·ª£i video b·∫Øt ƒë·∫ßu
      setTimeout(() => {
        detectFace();
      }, 500);
    } catch (error) {
      console.error("L·ªói camera:", error);
      setStatus("‚ùå L·ªói truy c·∫≠p camera. Vui l√≤ng cho ph√©p quy·ªÅn camera.");
    }
  };

  const detectFace = async () => {
    const video = videoRef.current;
    let attempts = 0;

    const check = async () => {
      if (attempts++ > 100) {
        setStatus("‚è∞ Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t. Vui l√≤ng th·ª≠ l·∫°i.");
        setIsScanning(false);
        return;
      }

      try {
        const detection = await faceapi
          .detectSingleFace(video, new faceapi.TinyFaceDetectorOptions())
          .withFaceLandmarks()
          .withFaceDescriptor();

        if (detection) {
          const confidence = (detection.detection.score * 100).toFixed(1);
          console.log(`ƒê√£ ph√°t hi·ªán khu√¥n m·∫∑t, ƒë·ªô tin c·∫≠y: ${confidence}%`);

          setStatus(`‚úÖ ƒê√£ ph√°t hi·ªán khu√¥n m·∫∑t (${confidence}%)`);

          const desc = Array.from(detection.descriptor);
          const match = findMatch(desc);

          if (match) {
            setMatchInfo({
              username: match.user.username,
              distance: match.distance,
              confidence: confidence,
            });

            if (match.distance < 0.55) {
              setStatus(`üéâ ƒê√£ nh·∫≠n di·ªán: ${match.user.username}`);
              await login(match.user._id);
              return;
            } else {
              setStatus(
                `‚ö†Ô∏è ƒê·ªô t∆∞∆°ng ƒë·ªìng th·∫•p: ${(match.distance * 100).toFixed(1)}%`
              );
            }
          } else {
            setStatus("‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ph√π h·ª£p");
          }
        } else {
          setStatus("üîç ƒêang t√¨m khu√¥n m·∫∑t...");
        }

        setTimeout(check, 300);
      } catch (error) {
        console.error("L·ªói detect:", error);
        setStatus("‚ùå L·ªói nh·∫≠n di·ªán khu√¥n m·∫∑t");
        setIsScanning(false);
      }
    };

    check();
  };

  const findMatch = (queryDescriptor) => {
    if (users.length === 0) {
      console.log("Kh√¥ng c√≥ users n√†o trong database");
      return null;
    }

    let bestMatch = null;
    let minDistance = Infinity;

    users.forEach((user) => {
      try {
        const storedDescriptor = user.profile?.faceDescriptor;

        if (!storedDescriptor || !Array.isArray(storedDescriptor)) {
          return;
        }

        if (storedDescriptor.length !== 128) {
          return;
        }

        const storedFloat32 = new Float32Array(storedDescriptor);
        const queryFloat32 = new Float32Array(queryDescriptor);

        const distance = faceapi.euclideanDistance(queryFloat32, storedFloat32);

        if (distance < minDistance) {
          minDistance = distance;
          bestMatch = { user, distance };
        }
      } catch (error) {
        console.error("L·ªói so s√°nh v·ªõi user:", user.username, error);
      }
    });

    return bestMatch;
  };

  const login = async (userId) => {
    try {
      setStatus("üîê ƒêang ƒëƒÉng nh·∫≠p...");
      const res = await api.post("/api/auth/face-login", { userId });

      if (res.data.success) {
        localStorage.setItem("token", res.data.token);
        setStatus("üéâ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
        setIsScanning(false);

        setTimeout(() => {
          window.location.href = "/profile";
        }, 1500);
      } else {
        setStatus("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i");
        setIsScanning(false);
      }
    } catch (error) {
      console.error("L·ªói login:", error);
      setStatus("‚ùå L·ªói ƒëƒÉng nh·∫≠p");
      setIsScanning(false);
    }
  };

  const stopCamera = () => {
    if (videoRef.current?.srcObject) {
      videoRef.current.srcObject.getTracks().forEach((track) => track.stop());
      setStatus("üì∑ Camera ƒë√£ t·∫Øt");
      setIsScanning(false);
      setMatchInfo(null);
    }
  };

  // Cleanup
  useEffect(() => {
    return () => stopCamera();
  }, []);

  const getStatusColor = () => {
    if (status.includes("‚ùå")) return "text-danger";
    if (status.includes("‚úÖ") || status.includes("üéâ")) return "text-success";
    if (status.includes("‚ö†Ô∏è")) return "text-warning";
    if (status.includes("üîç") || status.includes("üîê")) return "text-info";
    return "text-muted";
  };

  return (
    <div className="container py-4">
      <div className="row justify-content-center">
        <div className="col-md-8 col-lg-6">
          <div className="card border-0 shadow-lg">
            <div className="card-header bg-gradient-primary text-white text-center py-4">
              <div className="d-flex align-items-center justify-content-center mb-2">
                <i className="fas fa-face-recognition fa-2x me-3"></i>
                <div>
                  <h2 className="h3 mb-0">ƒêƒÉng Nh·∫≠p B·∫±ng Khu√¥n M·∫∑t</h2>
                  <p className="mb-0 opacity-75">
                    Nhanh ch√≥ng - B·∫£o m·∫≠t - Ti·ªán l·ª£i
                  </p>
                </div>
              </div>
            </div>

            <div className="card-body p-4">
              {/* Video Preview */}
              <div className="position-relative mb-4">
                <video
                  ref={videoRef}
                  autoPlay
                  muted
                  playsInline
                  className="w-100 rounded-3 shadow-sm"
                  style={{
                    maxHeight: "400px",
                    backgroundColor: "#f8f9fa",
                    border: "2px solid #e9ecef",
                  }}
                />
                {isScanning && (
                  <div className="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center">
                    <div
                      className="spinner-border text-primary"
                      style={{ width: "3rem", height: "3rem" }}
                    >
                      <span className="visually-hidden">ƒêang qu√©t...</span>
                    </div>
                  </div>
                )}
              </div>

              {/* Status */}
              <div className="text-center mb-4">
                <div className={`fw-bold fs-5 mb-2 ${getStatusColor()}`}>
                  {status}
                </div>

                {/* Match Info */}
                {matchInfo && (
                  <div className="alert alert-info py-2 px-3 d-inline-block">
                    <small>
                      <strong>{matchInfo.username}</strong> ‚Ä¢ ƒê·ªô t∆∞∆°ng ƒë·ªìng:{" "}
                      <strong>
                        {(100 - matchInfo.distance * 100).toFixed(1)}%
                      </strong>
                    </small>
                  </div>
                )}
              </div>

              {/* Control Buttons */}
              <div className="d-flex gap-3 justify-content-center mb-4">
                <button
                  onClick={start}
                  className="btn btn-primary btn-lg px-4"
                  disabled={!modelsLoaded || isScanning}
                >
                  <i className="fas fa-camera me-2"></i>
                  {modelsLoaded ? "B·∫≠t Camera" : "ƒêang t·∫£i..."}
                </button>

                <button
                  onClick={stopCamera}
                  className="btn btn-outline-secondary btn-lg px-4"
                  disabled={!isScanning}
                >
                  <i className="fas fa-stop me-2"></i>
                  D·ª´ng
                </button>
              </div>

              {/* Stats */}
              <div className="row text-center">
                <div className="col-6">
                  <div className="border-end">
                    <div className="text-primary fw-bold fs-4">
                      {users.length}
                    </div>
                    <small className="text-muted">Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√Ω</small>
                  </div>
                </div>
                <div className="col-6">
                  <div>
                    <div className="text-success fw-bold fs-4">
                      {modelsLoaded ? "‚úì" : "..."}
                    </div>
                    <small className="text-muted">H·ªá th·ªëng s·∫µn s√†ng</small>
                  </div>
                </div>
              </div>

              {/* Instructions */}
              <div className="mt-4 p-3 bg-light rounded-3">
                <h6 className="fw-bold mb-2">üìù H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:</h6>
                <div className="row small text-muted">
                  <div className="col-md-6">
                    <i className="fas fa-check-circle text-success me-2"></i>
                    ƒê·∫£m b·∫£o √°nh s√°ng ƒë·ªß
                  </div>
                  <div className="col-md-6">
                    <i className="fas fa-check-circle text-success me-2"></i>
                    Nh√¨n th·∫≥ng v√†o camera
                  </div>
                  <div className="col-md-6">
                    <i className="fas fa-check-circle text-success me-2"></i>
                    Gi·ªØ khu√¥n m·∫∑t trong khung h√¨nh
                  </div>
                  <div className="col-md-6">
                    <i className="fas fa-check-circle text-success me-2"></i>
                    Kh√¥ng ƒëeo k√≠nh r√¢m
                  </div>
                </div>
              </div>
            </div>

            <div className="card-footer bg-transparent text-center py-3">
              <small className="text-muted">
                <i className="fas fa-shield-alt me-1"></i>
                H·ªá th·ªëng s·ª≠ d·ª•ng AI ƒë·ªÉ b·∫£o v·ªá th√¥ng tin c·ªßa b·∫°n
              </small>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FaceLogin;
