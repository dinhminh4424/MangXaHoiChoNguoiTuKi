// controllers/journalController.js
const Journal = require("../models/Journal");
const Notification = require("../models/Notification");
const FileManager = require("../utils/fileManager");

// T·∫°o nh·∫≠t k√Ω m·ªõi v√† g·ª≠i th√¥ng b√°o
exports.createJournal = async (req, res) => {
  try {
    const { userId, title, content, emotions, tags, isPrivate } = req.body;

    // Ki·ªÉm tra xem h√¥m nay ƒë√£ c√≥ nh·∫≠t k√Ω ch∆∞a
    const today = new Date();
    const startOfDay = new Date(today.setHours(0, 0, 0, 0));
    const endOfDay = new Date(today.setHours(23, 59, 59, 999));

    const existingJournal = await Journal.findOne({
      userId,
      date: { $gte: startOfDay, $lte: endOfDay },
    });

    if (existingJournal) {
      return res.status(400).json({
        success: false,
        message: "H√¥m nay b·∫°n ƒë√£ ghi nh·∫≠t k√Ω r·ªìi!",
      });
    }

    // X·ª≠ l√Ω media files n·∫øu c√≥
    const mediaFiles = req.files
      ? req.files.map((file) => {
          // X√°c ƒë·ªãnh th∆∞ m·ª•c theo mimetype c·ªßa file
          let fileFolder = "documents";

          if (file.mimetype.startsWith("image/")) {
            fileFolder = "images";
          } else if (file.mimetype.startsWith("video/")) {
            fileFolder = "videos";
          } else if (file.mimetype.startsWith("audio/")) {
            fileFolder = "audio";
          }

          // T·∫°o URL truy c·∫≠p - S·ª¨A: file.filename thay v√¨ req.file.filename
          const fileUrl = `${req.protocol}://${req.get(
            "host"
          )}/api/uploads/${fileFolder}/${file.filename}`;

          return fileUrl;
        })
      : [];

    // T·∫°o nh·∫≠t k√Ω m·ªõi
    const newJournal = new Journal({
      userId,
      title,
      content,
      emotions: emotions || [],
      tags: tags || [],
      media: mediaFiles,
      isPrivate: isPrivate !== undefined ? isPrivate : true,
      date: new Date(),
    });

    await newJournal.save();

    // T·∫°o th√¥ng b√°o
    const notification = new Notification({
      userId,
      message: `üìù B·∫°n v·ª´a ghi nh·∫≠t k√Ω "${title}" th√†nh c√¥ng! H√£y ti·∫øp t·ª•c duy tr√¨ th√≥i quen t·ªët n√†y nh√©!`,
      read: false,
    });

    await notification.save();

    res.status(201).json({
      success: true,
      message: "Ghi nh·∫≠t k√Ω th√†nh c√¥ng!",
      data: {
        journal: newJournal,
        notification: notification,
      },
    });
  } catch (error) {
    console.error("Error creating journal:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi ghi nh·∫≠t k√Ω: " + error.message,
      error: error.message,
    });
  }
};

// C·∫≠p nh·∫≠t nh·∫≠t k√Ω h√¥m nay - ƒê√É S·ª¨A L·ªñI
exports.updateTodayJournal = async (req, res) => {
  try {
    const { userId } = req.params;
    const updateData = req.body;

    const today = new Date();
    const startOfDay = new Date(today.setHours(0, 0, 0, 0));
    const endOfDay = new Date(today.setHours(23, 59, 59, 999));

    // X·ª≠ l√Ω media files m·ªõi n·∫øu c√≥ - ƒê√É S·ª¨A L·ªñI
    if (req.files && req.files.length > 0) {
      const newMedia = req.files.map((file) => {
        // X√°c ƒë·ªãnh th∆∞ m·ª•c theo mimetype c·ªßa file
        let fileFolder = "documents";

        if (file.mimetype.startsWith("image/")) {
          fileFolder = "images";
        } else if (file.mimetype.startsWith("video/")) {
          fileFolder = "videos";
        } else if (file.mimetype.startsWith("audio/")) {
          fileFolder = "audio";
        }

        // T·∫°o URL truy c·∫≠p - S·ª¨A: file.filename thay v√¨ req.file.filename
        const fileUrl = `${req.protocol}://${req.get(
          "host"
        )}/api/uploads/${fileFolder}/${file.filename}`;

        return fileUrl;
      });

      updateData.media = [...(updateData.media || []), ...newMedia];
    }

    const updatedJournal = await Journal.findOneAndUpdate(
      {
        userId,
        date: { $gte: startOfDay, $lte: endOfDay },
      },
      { $set: updateData },
      { new: true, runValidators: true }
    );

    if (!updatedJournal) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y nh·∫≠t k√Ω h√¥m nay ƒë·ªÉ c·∫≠p nh·∫≠t",
      });
    }

    // T·∫°o th√¥ng b√°o c·∫≠p nh·∫≠t
    const notification = new Notification({
      userId,
      message: `‚úèÔ∏è Nh·∫≠t k√Ω "${updatedJournal.title}" ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!`,
      read: false,
    });

    await notification.save();

    res.json({
      success: true,
      message: "C·∫≠p nh·∫≠t nh·∫≠t k√Ω th√†nh c√¥ng!",
      data: {
        journal: updatedJournal,
        notification: notification,
      },
    });
  } catch (error) {
    console.error("Error updating journal:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi c·∫≠p nh·∫≠t nh·∫≠t k√Ω",
    });
  }
};

exports.updateJournal = async (req, res) => {
  try {
    const { journalId } = req.params;

    console.log("üß† [Update Journal] journalId:", journalId);
    console.log("üì¶ req.body:", req.body);
    console.log("üì∏ req.files:", req.files);

    // ‚úÖ X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ form-data
    const normalizedData = {};

    // X·ª≠ l√Ω c√°c field t·ª´ req.body (ƒë√£ b·ªã stringify t·ª´ client)
    Object.keys(req.body).forEach((key) => {
      let value = req.body[key];

      // Parse JSON strings
      if (typeof value === "string") {
        try {
          // Th·ª≠ parse JSON
          value = JSON.parse(value);
        } catch (error) {
          // N·∫øu kh√¥ng ph·∫£i JSON, gi·ªØ nguy√™n gi√° tr·ªã
          console.log(`Field ${key} is not JSON, keeping as string:`, value);
        }
      }

      normalizedData[key] = value;
    });

    // ‚úÖ X·ª≠ l√Ω file uploads
    if (req.files && req.files.length > 0) {
      const newMedia = req.files.map((file) => {
        let fileFolder = "documents";
        if (file.mimetype.startsWith("image/")) {
          fileFolder = "images";
        } else if (file.mimetype.startsWith("video/")) {
          fileFolder = "videos";
        } else if (file.mimetype.startsWith("audio/")) {
          fileFolder = "audio";
        }

        const fileUrl = `${req.protocol}://${req.get(
          "host"
        )}/api/uploads/${fileFolder}/${file.filename}`;
        return fileUrl;
      });

      // K·∫øt h·ª£p media c≈© v√† media m·ªõi
      normalizedData.media = [
        ...(normalizedData.media || []), // Media URLs t·ª´ client
        ...newMedia, // Media m·ªõi upload
      ];
    }

    console.log("‚úÖ Normalized data after processing:", normalizedData);

    // T√¨m journal tr∆∞·ªõc ƒë·ªÉ l·∫•y userId v√† ki·ªÉm tra t·ªìn t·∫°i
    const existingJournal = await Journal.findById(journalId);
    if (!existingJournal) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y nh·∫≠t k√Ω",
      });
    }

    // ‚úÖ ƒê·∫£m b·∫£o c√°c field array kh√¥ng b·ªã undefined
    const finalUpdateData = {
      ...normalizedData,
      emotions: Array.isArray(normalizedData.emotions)
        ? normalizedData.emotions
        : [],
      tags: Array.isArray(normalizedData.tags) ? normalizedData.tags : [],
      media: Array.isArray(normalizedData.media) ? normalizedData.media : [],
      updatedAt: new Date(),
    };

    // C·∫≠p nh·∫≠t journal
    const updatedJournal = await Journal.findByIdAndUpdate(
      journalId,
      { $set: finalUpdateData },
      { new: true, runValidators: true }
    ).populate("userId", "username email");

    if (!updatedJournal) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y nh·∫≠t k√Ω ƒë·ªÉ c·∫≠p nh·∫≠t",
      });
    }

    // ‚úÖ T·∫°o notification
    try {
      const notification = new Notification({
        userId: existingJournal.userId,
        type: "journal_updated",
        message: `‚úèÔ∏è Nh·∫≠t k√Ω "${updatedJournal.title}" ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!`,
        relatedId: journalId,
        read: false,
      });

      await notification.save();
      console.log("‚úÖ Notification created successfully");
    } catch (notificationError) {
      console.error("‚ùå Notification creation failed:", notificationError);
      // Kh√¥ng throw error - journal ƒë√£ update th√†nh c√¥ng
    }

    res.json({
      success: true,
      message: "C·∫≠p nh·∫≠t nh·∫≠t k√Ω th√†nh c√¥ng!",
      data: {
        journal: updatedJournal,
      },
    });
  } catch (error) {
    console.error("‚ùå Error updating journal:", error);

    let errorMessage = "L·ªói server khi c·∫≠p nh·∫≠t nh·∫≠t k√Ω";
    let statusCode = 500;

    if (error.name === "ValidationError") {
      statusCode = 400;
      errorMessage = "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá";
    } else if (error.name === "CastError") {
      statusCode = 400;
      errorMessage = "ID nh·∫≠t k√Ω kh√¥ng h·ª£p l·ªá";
    }

    res.status(statusCode).json({
      success: false,
      message: errorMessage,
      error: process.env.NODE_ENV === "development" ? error.message : undefined,
    });
  }
};

// L·∫•y nh·∫≠t k√Ω h√¥m nay c·ªßa user (gi·ªØ nguy√™n)
exports.getTodayJournal = async (req, res) => {
  try {
    const { userId } = req.params;

    const today = new Date();
    const startOfDay = new Date(today.setHours(0, 0, 0, 0));
    const endOfDay = new Date(today.setHours(23, 59, 59, 999));

    const todayJournal = await Journal.findOne({
      userId,
      date: { $gte: startOfDay, $lte: endOfDay },
    }).populate("userId", "username email");

    if (!todayJournal) {
      return res.json({
        success: false,
        message: "H√¥m nay b·∫°n ch∆∞a ghi nh·∫≠t k√Ω",
        data: null,
      });
    }

    res.json({
      success: true,
      data: todayJournal,
    });
  } catch (error) {
    console.error("Error getting today's journal:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y nh·∫≠t k√Ω",
    });
  }
};

exports.getJournalById = async (req, res) => {
  try {
    const { journalId } = req.params;
    const journal = await Journal.findById(journalId).populate(
      "userId",
      "username email"
    );

    if (!journal) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y nh·∫≠t k√Ω",
        data: null,
      });
    }
    res.json({
      success: true,
      data: journal,
      message: "T√¨m ki·∫øm nh·∫≠t k√Ω th√†nh c√¥ng",
    });
  } catch (error) {
    console.error("Error getting journal by ID:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y nh·∫≠t k√Ω",
    });
  }
};

exports.deleteJournal = async (req, res) => {
  const { journalId } = req.params;
  const userId = req.user.userId;

  try {
    const journal = await Journal.findById(journalId);
    // Ki·ªÉm tra xem journal c√≥ t·ªìn t·∫°i kh√¥ng
    if (!journal) {
      return res.status(404).json({
        success: false,
        message: `Kh√¥ng t√¨m th·∫•y nh·∫≠t k√Ω v·ªõi ID: ${journalId}`,
      });
    }

    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu - so s√°nh ObjectId
    if (journal.userId.toString() !== userId.toString()) {
      return res.status(403).json({
        success: false,
        message: `B·∫°n kh√¥ng c√≥ quy·ªÅn xo√° nh·∫≠t k√Ω n√†y`,
        error: `B·∫°n kh√¥ng c√≥ quy·ªÅn xo√° nh·∫≠t k√Ω: id: [${journal._id}]`,
      });
    }

    const journalDelete = { ...journal.toObject() };

    await Journal.deleteOne({ _id: journalId });

    if (journalDelete.media) {
      if (journalDelete.media.length > 0) {
        await FileManager.deleteMultipleFiles(journalDelete.media);
      }
    }
    res.status(200).json({
      success: true,
      message: `ƒê√£ xo√° th√†nh c√¥ng nh·∫≠t k√≠ ng√†y [${journalDelete.createdAt}]  n√†y`,
      journalDelete: journalDelete,
    });
  } catch (error) {
    console.error("Error getting journal by ID:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi xo√° nh·∫≠t k√≠: " + error.message,
    });
  }
};
