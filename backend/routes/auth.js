// Khai B√°o
const express = require("express");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const mailService = require("../services/mailService");
const auth = require("../middleware/auth");
const upload = require("../middleware/upload");
const router = express.Router();
const { normalizeBaseUsername, generateUniqueUsernameFrom } = require("../utils/username");

// T·∫°o token JWT v·ªõi (userId) v√† th·ªùi gian h·∫øt h·∫°n
const generateToken = (userId) => {
  return jwt.sign(
    { userId },
    process.env.JWT_SECRET || "autism_support_secret",
    {
      expiresIn: "7d",
    }
  );
};

// Middleware x√°c th·ª±c
const authMiddleware = async (req, res, next) => {
  try {
    const token = req.header("Authorization")?.replace("Bearer ", "");

    if (!token) {
      return res.status(401).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y token",
      });
    }

    const decoded = jwt.verify(
      token,
      process.env.JWT_SECRET || "autism_support_secret"
    );
    req.user = await User.findById(decoded.userId);
    next();
  } catch (error) {
    res.status(401).json({
      success: false,
      message: "Token kh√¥ng h·ª£p l·ªá",
    });
  }
};

// ƒêƒÉng k√Ω - L∆ØU LU√îN V√Ä G·ª¨I EMAIL CH√ÄO M·ª™NG
router.post("/register", async (req, res) => {
  try {
    const { username, email, password, fullName, role } = req.body;

    // Chu·∫©n h√≥a username ƒë·∫ßu v√†o (lo·∫°i b·ªè d·∫•u/kho·∫£ng tr·∫Øng/k√Ω t·ª± ƒë·∫∑c bi·ªát)
    const normalizedUsernameBase = normalizeBaseUsername(username || fullName || (email ? email.split("@")[0] : "user"));
    const normalizedUsername = await generateUniqueUsernameFrom(normalizedUsernameBase);

    // Ki·ªÉm tra user ƒë√£ t·ªìn t·∫°i
    const existingUser = await User.findOne({
      $or: [{ email }, { username }],
    });

    if (existingUser) {
      return res.status(400).json({
        success: false,
        message: "Email ho·∫∑c username ƒë√£ t·ªìn t·∫°i",
      });
    }

    // T·∫°o user m·ªõi - L∆ØU LU√îN V√ÄO DATABASE
    const user = new User({
      username: normalizedUsername,
      email,
      password,
      fullName,
      role: role || "user",
    });

    await user.save();

    // G·ª¨I EMAIL CH√ÄO M·ª™NG ƒêƒÇNG K√ù TH√ÄNH C√îNG
    const emailResult = await mailService.sendEmail({
      to: user.email,
      subject: "üéâ ƒêƒÉng k√Ω th√†nh c√¥ng - Ch√†o m·ª´ng ƒë·∫øn v·ªõi Autism Support!",
      templateName: "REGISTRATION_SUCCESS",
      templateData: {
        name: user.fullName || user.username,
        username: user.username,
        email: user.email,
        registrationTime: new Date().toLocaleString("vi-VN"),
        loginLink: `${process.env.FRONTEND_URL}/login`,
      },
    });

    // T·∫°o token
    const token = generateToken(user._id);

    res.status(201).json({
      success: true,
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
      data: {
        user: {
          id: user._id,
          username: user.username,
          email: user.email,
          fullName: user.fullName,
          role: user.role,
        },
        token,
        emailSent: emailResult.success,
      },
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message,
    });
  }
});

// Y√™u c·∫ßu OTP reset password
router.post("/forgot-password", async (req, res) => {
  try {
    const { email } = req.body;
    console.log("");
    const user = await User.findOne({ email });
    if (!user) {
      // Kh√¥ng cho bi·∫øt email c√≥ t·ªìn t·∫°i hay kh√¥ng (b·∫£o m·∫≠t)
      return res.json({
        success: true,
        message: "N·∫øu email t·ªìn t·∫°i, ch√∫ng t√¥i ƒë√£ g·ª≠i m√£ OTP",
      });
    }

    // T·∫°o OTP reset password
    const otp = user.generateResetPasswordOTP();
    await user.save();

    // G·ª≠i email OTP
    const emailResult = await mailService.sendEmail({
      to: user.email,
      subject: "M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - Autism Support",
      templateName: "PASSWORD_RESET_OTP",
      templateData: {
        name: user.fullName || user.username,
        otp: otp,
        expiryTime: "10 ph√∫t",
      },
    });

    res.json({
      success: true,
      message: "ƒê√£ g·ª≠i m√£ OTP ƒë·∫øn email c·ªßa b·∫°n",
      emailSent: emailResult.success,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message,
    });
  }
});

// X√°c minh OTP v√† reset password
router.post("/reset-password", async (req, res) => {
  try {
    const { email, otp, newPassword } = req.body;

    if (!email || !otp || !newPassword) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin: email, OTP ho·∫∑c m·∫≠t kh·∫©u m·ªõi",
      });
    }

    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({
        success: false,
        message: "Th√¥ng tin kh√¥ng h·ª£p l·ªá",
      });
    }

    // X√°c minh OTP
    if (!user.verifyResetPasswordOTP(otp)) {
      return res.status(400).json({
        success: false,
        message: "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
      });
    }

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    user.password = newPassword;
    user.resetPasswordOTP = undefined;
    user.resetPasswordExpire = undefined;
    await user.save();

    // G·ª≠i email x√°c nh·∫≠n reset th√†nh c√¥ng
    await mailService.sendEmail({
      to: user.email,
      subject: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng - Autism Support",
      templateName: "PASSWORD_RESET_SUCCESS",
      templateData: {
        name: user.fullName || user.username,
        resetTime: new Date().toLocaleString("vi-VN"),
        ipAddress: req.ip,
        deviceInfo: req.headers["user-agent"],
        loginLink: `${process.env.FRONTEND_URL}/login`,
        supportEmail: process.env.EMAIL_USER,
      },
    });

    res.json({
      success: true,
      message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng",
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message,
    });
  }
});

// ƒêƒÉng nh·∫≠p - GI·ªÆ NGUY√äN
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;

    console.log("================================ req.body: ", req.body);

    // T√¨m user b·∫±ng email
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(401).json({
        success: false,
        message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng",
      });
    }

    // Ki·ªÉm tra password
    const isPasswordValid = await user.comparePassword(password);
    if (!isPasswordValid) {
      return res.status(401).json({
        success: false,
        message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng",
      });
    }

    // Ki·ªÉm tra ho·∫°t ƒë·ªông
    if (user.active == false) {
      return res.status(401).json({
        success: false,
        message: "T√†i Kho·∫£n ƒê√£ B·ªã Kho√°",
      });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i online
    user.isOnline = true;
    user.lastSeen = new Date();
    await user.save();

    // T·∫°o token
    const token = generateToken(user._id);

    res.json({
      success: true,
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      data: {
        user: {
          id: user._id,
          username: user.username,
          email: user.email,
          fullName: user.fullName,
          role: user.role,
          profile: user.profile,
        },
        token,
      },
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message,
    });
  }
});

// ƒêƒÉng xu·∫•t - GI·ªÆ NGUY√äN
router.post("/logout", authMiddleware, async (req, res) => {
  try {
    const userId = req.user._id;

    await User.findByIdAndUpdate(
      userId,
      { $set: { isOnline: false, lastSeen: Date.now() } },
      { new: true }
    );

    res.status(200).json({
      success: true,
      message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng",
      data: null,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Server error",
      error: error.message,
    });
  }
});

// L·∫§Y DANH S√ÅCH USER C√ì KHU√îN M·∫∂T (cho login)
router.get("/face-users", async (req, res) => {
  try {
    const users = await User.find({
      "profile.idCard.verified": true,
      "profile.faceDescriptor": { $exists: true, $ne: null },
    }).select("username profile.faceDescriptor");

    res.json(users);
  } catch (error) {
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
});

// ƒêƒÇNG NH·∫¨P B·∫∞NG KHU√îN M·∫∂T
router.post("/face-login", async (req, res) => {
  try {
    const { userId } = req.body;
    const user = await User.findById(userId);

    if (!user || !user.profile.idCard?.verified) {
      return res
        .status(400)
        .json({ success: false, message: "T√†i kho·∫£n ch∆∞a x√°c minh khu√¥n m·∫∑t" });
    }

    const token = jwt.sign(
      { userId: user._id },
      process.env.JWT_SECRET || "autism_support_secret",
      { expiresIn: "7d" }
    );

    res.json({ success: true, token });
  } catch (error) {
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
});

// X√ÅC MINH CCCD + L∆ØU KHU√îN M·∫∂T
// POST /auth/verify-id-face
router.post(
  "/verify-id-face",
  auth,
  upload.fields([
    { name: "cccd", maxCount: 1 },
    { name: "selfie", maxCount: 1 },
  ]),
  async (req, res) => {
    try {
      const { fullName, number, dob, address, faceDescriptor } = req.body;

      const userId = req.user.userId;
      const user = await User.findById(userId);

      console.log(" =============== req.body: ", req.body);

      if (!req.files.cccd || !req.files.selfie) {
        return res.status(400).json({ success: false, message: "Thi·∫øu ·∫£nh" });
      }

      // L∆∞u v√†o profile
      user.profile.idCard = {
        number,
        fullName,
        dob,
        address,
        frontImage: `/api/uploads/images/${req.files.cccd[0].filename}`,
        selfieImage: `/api/uploads/images/${req.files.selfie[0].filename}`,
        verified: true,
        verifiedAt: new Date(),
      };

      // L∆∞u descriptor
      user.profile.faceDescriptor = JSON.parse(faceDescriptor);

      // console.log(" =============== user: ", user);

      await user.save();

      res.json({
        success: true,
        message: "X√°c minh th√†nh c√¥ng!",
        data: {
          fullName: fullName,
          number: number,
          dob: dob,
          address: address,
          cccdFile: `/api/uploads/images/${req.files.cccd[0].filename}`,
          selfieBlob: `/api/uploads/images/${req.files.selfie[0].filename}`,
        },
      });
    } catch (err) {
      console.error(err);
      res.status(500).json({ success: false, message: "L·ªói server" });
    }
  }
);

module.exports = router;
